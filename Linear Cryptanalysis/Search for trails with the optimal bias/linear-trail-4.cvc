linear_dist: ARRAY BITVECTOR(8) OF BITVECTOR(8) ;

before_sbox_mask_0_0: BITVECTOR(4) ;
before_sbox_mask_0_1: BITVECTOR(4) ;
before_sbox_mask_0_2: BITVECTOR(4) ;
before_sbox_mask_0_3: BITVECTOR(4) ;
before_sbox_mask_0_4: BITVECTOR(4) ;
before_sbox_mask_0_5: BITVECTOR(4) ;
before_sbox_mask_0_6: BITVECTOR(4) ;
before_sbox_mask_0_7: BITVECTOR(4) ;
before_sbox_mask_0_8: BITVECTOR(4) ;
before_sbox_mask_0_9: BITVECTOR(4) ;
before_sbox_mask_0_10: BITVECTOR(4) ;
before_sbox_mask_0_11: BITVECTOR(4) ;
before_sbox_mask_0_12: BITVECTOR(4) ;
before_sbox_mask_0_13: BITVECTOR(4) ;
before_sbox_mask_0_14: BITVECTOR(4) ;
before_sbox_mask_0_15: BITVECTOR(4) ;

after_sbox_mask_0_0: BITVECTOR(4) ;
after_sbox_mask_0_1: BITVECTOR(4) ;
after_sbox_mask_0_2: BITVECTOR(4) ;
after_sbox_mask_0_3: BITVECTOR(4) ;
after_sbox_mask_0_4: BITVECTOR(4) ;
after_sbox_mask_0_5: BITVECTOR(4) ;
after_sbox_mask_0_6: BITVECTOR(4) ;
after_sbox_mask_0_7: BITVECTOR(4) ;
after_sbox_mask_0_8: BITVECTOR(4) ;
after_sbox_mask_0_9: BITVECTOR(4) ;
after_sbox_mask_0_10: BITVECTOR(4) ;
after_sbox_mask_0_11: BITVECTOR(4) ;
after_sbox_mask_0_12: BITVECTOR(4) ;
after_sbox_mask_0_13: BITVECTOR(4) ;
after_sbox_mask_0_14: BITVECTOR(4) ;
after_sbox_mask_0_15: BITVECTOR(4) ;

before_rotation_mask_0_0: BITVECTOR(16) ;
before_rotation_mask_0_1: BITVECTOR(16) ;
before_rotation_mask_0_2: BITVECTOR(16) ;
before_rotation_mask_0_3: BITVECTOR(16) ;

after_rotation_mask_0_0: BITVECTOR(16) ;
after_rotation_mask_0_1: BITVECTOR(16) ;
after_rotation_mask_0_2: BITVECTOR(16) ;
after_rotation_mask_0_3: BITVECTOR(16) ;

after_blockxor_mask_0_0: BITVECTOR(16) ;
after_blockxor_mask_0_1: BITVECTOR(16) ;
after_blockxor_mask_0_2: BITVECTOR(16) ;
after_blockxor_mask_0_3: BITVECTOR(16) ;

branch_0_0_up: BITVECTOR(16) ;
branch_0_0_down: BITVECTOR(16) ;
branch_0_0_another: BITVECTOR(16) ;
branch_0_1_up: BITVECTOR(16) ;
branch_0_1_down: BITVECTOR(16) ;
branch_0_1_another: BITVECTOR(16) ;
branch_0_2_up: BITVECTOR(16) ;
branch_0_2_down: BITVECTOR(16) ;
branch_0_2_another: BITVECTOR(16) ;
branch_0_3_up: BITVECTOR(16) ;
branch_0_3_down: BITVECTOR(16) ;
branch_0_3_another: BITVECTOR(16) ;

xor_0_0_up: BITVECTOR(16) ;
xor_0_0_down: BITVECTOR(16) ;
xor_0_0_another: BITVECTOR(16) ;
xor_0_1_up: BITVECTOR(16) ;
xor_0_1_down: BITVECTOR(16) ;
xor_0_1_another: BITVECTOR(16) ;
xor_0_2_up: BITVECTOR(16) ;
xor_0_2_down: BITVECTOR(16) ;
xor_0_2_another: BITVECTOR(16) ;
xor_0_3_up: BITVECTOR(16) ;
xor_0_3_down: BITVECTOR(16) ;
xor_0_3_another: BITVECTOR(16) ;

flag_0_0: BITVECTOR(12) ;
flag_0_1: BITVECTOR(12) ;
flag_0_2: BITVECTOR(12) ;
flag_0_3: BITVECTOR(12) ;
flag_0_4: BITVECTOR(12) ;
flag_0_5: BITVECTOR(12) ;
flag_0_6: BITVECTOR(12) ;
flag_0_7: BITVECTOR(12) ;
flag_0_8: BITVECTOR(12) ;
flag_0_9: BITVECTOR(12) ;
flag_0_10: BITVECTOR(12) ;
flag_0_11: BITVECTOR(12) ;
flag_0_12: BITVECTOR(12) ;
flag_0_13: BITVECTOR(12) ;
flag_0_14: BITVECTOR(12) ;
flag_0_15: BITVECTOR(12) ;

bias_0_0: BITVECTOR(12) ;
bias_0_1: BITVECTOR(12) ;
bias_0_2: BITVECTOR(12) ;
bias_0_3: BITVECTOR(12) ;
bias_0_4: BITVECTOR(12) ;
bias_0_5: BITVECTOR(12) ;
bias_0_6: BITVECTOR(12) ;
bias_0_7: BITVECTOR(12) ;
bias_0_8: BITVECTOR(12) ;
bias_0_9: BITVECTOR(12) ;
bias_0_10: BITVECTOR(12) ;
bias_0_11: BITVECTOR(12) ;
bias_0_12: BITVECTOR(12) ;
bias_0_13: BITVECTOR(12) ;
bias_0_14: BITVECTOR(12) ;
bias_0_15: BITVECTOR(12) ;

before_sbox_mask_1_0: BITVECTOR(4) ;
before_sbox_mask_1_1: BITVECTOR(4) ;
before_sbox_mask_1_2: BITVECTOR(4) ;
before_sbox_mask_1_3: BITVECTOR(4) ;
before_sbox_mask_1_4: BITVECTOR(4) ;
before_sbox_mask_1_5: BITVECTOR(4) ;
before_sbox_mask_1_6: BITVECTOR(4) ;
before_sbox_mask_1_7: BITVECTOR(4) ;
before_sbox_mask_1_8: BITVECTOR(4) ;
before_sbox_mask_1_9: BITVECTOR(4) ;
before_sbox_mask_1_10: BITVECTOR(4) ;
before_sbox_mask_1_11: BITVECTOR(4) ;
before_sbox_mask_1_12: BITVECTOR(4) ;
before_sbox_mask_1_13: BITVECTOR(4) ;
before_sbox_mask_1_14: BITVECTOR(4) ;
before_sbox_mask_1_15: BITVECTOR(4) ;

after_sbox_mask_1_0: BITVECTOR(4) ;
after_sbox_mask_1_1: BITVECTOR(4) ;
after_sbox_mask_1_2: BITVECTOR(4) ;
after_sbox_mask_1_3: BITVECTOR(4) ;
after_sbox_mask_1_4: BITVECTOR(4) ;
after_sbox_mask_1_5: BITVECTOR(4) ;
after_sbox_mask_1_6: BITVECTOR(4) ;
after_sbox_mask_1_7: BITVECTOR(4) ;
after_sbox_mask_1_8: BITVECTOR(4) ;
after_sbox_mask_1_9: BITVECTOR(4) ;
after_sbox_mask_1_10: BITVECTOR(4) ;
after_sbox_mask_1_11: BITVECTOR(4) ;
after_sbox_mask_1_12: BITVECTOR(4) ;
after_sbox_mask_1_13: BITVECTOR(4) ;
after_sbox_mask_1_14: BITVECTOR(4) ;
after_sbox_mask_1_15: BITVECTOR(4) ;

before_rotation_mask_1_0: BITVECTOR(16) ;
before_rotation_mask_1_1: BITVECTOR(16) ;
before_rotation_mask_1_2: BITVECTOR(16) ;
before_rotation_mask_1_3: BITVECTOR(16) ;

after_rotation_mask_1_0: BITVECTOR(16) ;
after_rotation_mask_1_1: BITVECTOR(16) ;
after_rotation_mask_1_2: BITVECTOR(16) ;
after_rotation_mask_1_3: BITVECTOR(16) ;

after_blockxor_mask_1_0: BITVECTOR(16) ;
after_blockxor_mask_1_1: BITVECTOR(16) ;
after_blockxor_mask_1_2: BITVECTOR(16) ;
after_blockxor_mask_1_3: BITVECTOR(16) ;

branch_1_0_up: BITVECTOR(16) ;
branch_1_0_down: BITVECTOR(16) ;
branch_1_0_another: BITVECTOR(16) ;
branch_1_1_up: BITVECTOR(16) ;
branch_1_1_down: BITVECTOR(16) ;
branch_1_1_another: BITVECTOR(16) ;
branch_1_2_up: BITVECTOR(16) ;
branch_1_2_down: BITVECTOR(16) ;
branch_1_2_another: BITVECTOR(16) ;
branch_1_3_up: BITVECTOR(16) ;
branch_1_3_down: BITVECTOR(16) ;
branch_1_3_another: BITVECTOR(16) ;

xor_1_0_up: BITVECTOR(16) ;
xor_1_0_down: BITVECTOR(16) ;
xor_1_0_another: BITVECTOR(16) ;
xor_1_1_up: BITVECTOR(16) ;
xor_1_1_down: BITVECTOR(16) ;
xor_1_1_another: BITVECTOR(16) ;
xor_1_2_up: BITVECTOR(16) ;
xor_1_2_down: BITVECTOR(16) ;
xor_1_2_another: BITVECTOR(16) ;
xor_1_3_up: BITVECTOR(16) ;
xor_1_3_down: BITVECTOR(16) ;
xor_1_3_another: BITVECTOR(16) ;

flag_1_0: BITVECTOR(12) ;
flag_1_1: BITVECTOR(12) ;
flag_1_2: BITVECTOR(12) ;
flag_1_3: BITVECTOR(12) ;
flag_1_4: BITVECTOR(12) ;
flag_1_5: BITVECTOR(12) ;
flag_1_6: BITVECTOR(12) ;
flag_1_7: BITVECTOR(12) ;
flag_1_8: BITVECTOR(12) ;
flag_1_9: BITVECTOR(12) ;
flag_1_10: BITVECTOR(12) ;
flag_1_11: BITVECTOR(12) ;
flag_1_12: BITVECTOR(12) ;
flag_1_13: BITVECTOR(12) ;
flag_1_14: BITVECTOR(12) ;
flag_1_15: BITVECTOR(12) ;

bias_1_0: BITVECTOR(12) ;
bias_1_1: BITVECTOR(12) ;
bias_1_2: BITVECTOR(12) ;
bias_1_3: BITVECTOR(12) ;
bias_1_4: BITVECTOR(12) ;
bias_1_5: BITVECTOR(12) ;
bias_1_6: BITVECTOR(12) ;
bias_1_7: BITVECTOR(12) ;
bias_1_8: BITVECTOR(12) ;
bias_1_9: BITVECTOR(12) ;
bias_1_10: BITVECTOR(12) ;
bias_1_11: BITVECTOR(12) ;
bias_1_12: BITVECTOR(12) ;
bias_1_13: BITVECTOR(12) ;
bias_1_14: BITVECTOR(12) ;
bias_1_15: BITVECTOR(12) ;

before_sbox_mask_2_0: BITVECTOR(4) ;
before_sbox_mask_2_1: BITVECTOR(4) ;
before_sbox_mask_2_2: BITVECTOR(4) ;
before_sbox_mask_2_3: BITVECTOR(4) ;
before_sbox_mask_2_4: BITVECTOR(4) ;
before_sbox_mask_2_5: BITVECTOR(4) ;
before_sbox_mask_2_6: BITVECTOR(4) ;
before_sbox_mask_2_7: BITVECTOR(4) ;
before_sbox_mask_2_8: BITVECTOR(4) ;
before_sbox_mask_2_9: BITVECTOR(4) ;
before_sbox_mask_2_10: BITVECTOR(4) ;
before_sbox_mask_2_11: BITVECTOR(4) ;
before_sbox_mask_2_12: BITVECTOR(4) ;
before_sbox_mask_2_13: BITVECTOR(4) ;
before_sbox_mask_2_14: BITVECTOR(4) ;
before_sbox_mask_2_15: BITVECTOR(4) ;

after_sbox_mask_2_0: BITVECTOR(4) ;
after_sbox_mask_2_1: BITVECTOR(4) ;
after_sbox_mask_2_2: BITVECTOR(4) ;
after_sbox_mask_2_3: BITVECTOR(4) ;
after_sbox_mask_2_4: BITVECTOR(4) ;
after_sbox_mask_2_5: BITVECTOR(4) ;
after_sbox_mask_2_6: BITVECTOR(4) ;
after_sbox_mask_2_7: BITVECTOR(4) ;
after_sbox_mask_2_8: BITVECTOR(4) ;
after_sbox_mask_2_9: BITVECTOR(4) ;
after_sbox_mask_2_10: BITVECTOR(4) ;
after_sbox_mask_2_11: BITVECTOR(4) ;
after_sbox_mask_2_12: BITVECTOR(4) ;
after_sbox_mask_2_13: BITVECTOR(4) ;
after_sbox_mask_2_14: BITVECTOR(4) ;
after_sbox_mask_2_15: BITVECTOR(4) ;

before_rotation_mask_2_0: BITVECTOR(16) ;
before_rotation_mask_2_1: BITVECTOR(16) ;
before_rotation_mask_2_2: BITVECTOR(16) ;
before_rotation_mask_2_3: BITVECTOR(16) ;

after_rotation_mask_2_0: BITVECTOR(16) ;
after_rotation_mask_2_1: BITVECTOR(16) ;
after_rotation_mask_2_2: BITVECTOR(16) ;
after_rotation_mask_2_3: BITVECTOR(16) ;

after_blockxor_mask_2_0: BITVECTOR(16) ;
after_blockxor_mask_2_1: BITVECTOR(16) ;
after_blockxor_mask_2_2: BITVECTOR(16) ;
after_blockxor_mask_2_3: BITVECTOR(16) ;

branch_2_0_up: BITVECTOR(16) ;
branch_2_0_down: BITVECTOR(16) ;
branch_2_0_another: BITVECTOR(16) ;
branch_2_1_up: BITVECTOR(16) ;
branch_2_1_down: BITVECTOR(16) ;
branch_2_1_another: BITVECTOR(16) ;
branch_2_2_up: BITVECTOR(16) ;
branch_2_2_down: BITVECTOR(16) ;
branch_2_2_another: BITVECTOR(16) ;
branch_2_3_up: BITVECTOR(16) ;
branch_2_3_down: BITVECTOR(16) ;
branch_2_3_another: BITVECTOR(16) ;

xor_2_0_up: BITVECTOR(16) ;
xor_2_0_down: BITVECTOR(16) ;
xor_2_0_another: BITVECTOR(16) ;
xor_2_1_up: BITVECTOR(16) ;
xor_2_1_down: BITVECTOR(16) ;
xor_2_1_another: BITVECTOR(16) ;
xor_2_2_up: BITVECTOR(16) ;
xor_2_2_down: BITVECTOR(16) ;
xor_2_2_another: BITVECTOR(16) ;
xor_2_3_up: BITVECTOR(16) ;
xor_2_3_down: BITVECTOR(16) ;
xor_2_3_another: BITVECTOR(16) ;

flag_2_0: BITVECTOR(12) ;
flag_2_1: BITVECTOR(12) ;
flag_2_2: BITVECTOR(12) ;
flag_2_3: BITVECTOR(12) ;
flag_2_4: BITVECTOR(12) ;
flag_2_5: BITVECTOR(12) ;
flag_2_6: BITVECTOR(12) ;
flag_2_7: BITVECTOR(12) ;
flag_2_8: BITVECTOR(12) ;
flag_2_9: BITVECTOR(12) ;
flag_2_10: BITVECTOR(12) ;
flag_2_11: BITVECTOR(12) ;
flag_2_12: BITVECTOR(12) ;
flag_2_13: BITVECTOR(12) ;
flag_2_14: BITVECTOR(12) ;
flag_2_15: BITVECTOR(12) ;

bias_2_0: BITVECTOR(12) ;
bias_2_1: BITVECTOR(12) ;
bias_2_2: BITVECTOR(12) ;
bias_2_3: BITVECTOR(12) ;
bias_2_4: BITVECTOR(12) ;
bias_2_5: BITVECTOR(12) ;
bias_2_6: BITVECTOR(12) ;
bias_2_7: BITVECTOR(12) ;
bias_2_8: BITVECTOR(12) ;
bias_2_9: BITVECTOR(12) ;
bias_2_10: BITVECTOR(12) ;
bias_2_11: BITVECTOR(12) ;
bias_2_12: BITVECTOR(12) ;
bias_2_13: BITVECTOR(12) ;
bias_2_14: BITVECTOR(12) ;
bias_2_15: BITVECTOR(12) ;

before_sbox_mask_3_0: BITVECTOR(4) ;
before_sbox_mask_3_1: BITVECTOR(4) ;
before_sbox_mask_3_2: BITVECTOR(4) ;
before_sbox_mask_3_3: BITVECTOR(4) ;
before_sbox_mask_3_4: BITVECTOR(4) ;
before_sbox_mask_3_5: BITVECTOR(4) ;
before_sbox_mask_3_6: BITVECTOR(4) ;
before_sbox_mask_3_7: BITVECTOR(4) ;
before_sbox_mask_3_8: BITVECTOR(4) ;
before_sbox_mask_3_9: BITVECTOR(4) ;
before_sbox_mask_3_10: BITVECTOR(4) ;
before_sbox_mask_3_11: BITVECTOR(4) ;
before_sbox_mask_3_12: BITVECTOR(4) ;
before_sbox_mask_3_13: BITVECTOR(4) ;
before_sbox_mask_3_14: BITVECTOR(4) ;
before_sbox_mask_3_15: BITVECTOR(4) ;

after_sbox_mask_3_0: BITVECTOR(4) ;
after_sbox_mask_3_1: BITVECTOR(4) ;
after_sbox_mask_3_2: BITVECTOR(4) ;
after_sbox_mask_3_3: BITVECTOR(4) ;
after_sbox_mask_3_4: BITVECTOR(4) ;
after_sbox_mask_3_5: BITVECTOR(4) ;
after_sbox_mask_3_6: BITVECTOR(4) ;
after_sbox_mask_3_7: BITVECTOR(4) ;
after_sbox_mask_3_8: BITVECTOR(4) ;
after_sbox_mask_3_9: BITVECTOR(4) ;
after_sbox_mask_3_10: BITVECTOR(4) ;
after_sbox_mask_3_11: BITVECTOR(4) ;
after_sbox_mask_3_12: BITVECTOR(4) ;
after_sbox_mask_3_13: BITVECTOR(4) ;
after_sbox_mask_3_14: BITVECTOR(4) ;
after_sbox_mask_3_15: BITVECTOR(4) ;

before_rotation_mask_3_0: BITVECTOR(16) ;
before_rotation_mask_3_1: BITVECTOR(16) ;
before_rotation_mask_3_2: BITVECTOR(16) ;
before_rotation_mask_3_3: BITVECTOR(16) ;

after_rotation_mask_3_0: BITVECTOR(16) ;
after_rotation_mask_3_1: BITVECTOR(16) ;
after_rotation_mask_3_2: BITVECTOR(16) ;
after_rotation_mask_3_3: BITVECTOR(16) ;

after_blockxor_mask_3_0: BITVECTOR(16) ;
after_blockxor_mask_3_1: BITVECTOR(16) ;
after_blockxor_mask_3_2: BITVECTOR(16) ;
after_blockxor_mask_3_3: BITVECTOR(16) ;

branch_3_0_up: BITVECTOR(16) ;
branch_3_0_down: BITVECTOR(16) ;
branch_3_0_another: BITVECTOR(16) ;
branch_3_1_up: BITVECTOR(16) ;
branch_3_1_down: BITVECTOR(16) ;
branch_3_1_another: BITVECTOR(16) ;
branch_3_2_up: BITVECTOR(16) ;
branch_3_2_down: BITVECTOR(16) ;
branch_3_2_another: BITVECTOR(16) ;
branch_3_3_up: BITVECTOR(16) ;
branch_3_3_down: BITVECTOR(16) ;
branch_3_3_another: BITVECTOR(16) ;

xor_3_0_up: BITVECTOR(16) ;
xor_3_0_down: BITVECTOR(16) ;
xor_3_0_another: BITVECTOR(16) ;
xor_3_1_up: BITVECTOR(16) ;
xor_3_1_down: BITVECTOR(16) ;
xor_3_1_another: BITVECTOR(16) ;
xor_3_2_up: BITVECTOR(16) ;
xor_3_2_down: BITVECTOR(16) ;
xor_3_2_another: BITVECTOR(16) ;
xor_3_3_up: BITVECTOR(16) ;
xor_3_3_down: BITVECTOR(16) ;
xor_3_3_another: BITVECTOR(16) ;

flag_3_0: BITVECTOR(12) ;
flag_3_1: BITVECTOR(12) ;
flag_3_2: BITVECTOR(12) ;
flag_3_3: BITVECTOR(12) ;
flag_3_4: BITVECTOR(12) ;
flag_3_5: BITVECTOR(12) ;
flag_3_6: BITVECTOR(12) ;
flag_3_7: BITVECTOR(12) ;
flag_3_8: BITVECTOR(12) ;
flag_3_9: BITVECTOR(12) ;
flag_3_10: BITVECTOR(12) ;
flag_3_11: BITVECTOR(12) ;
flag_3_12: BITVECTOR(12) ;
flag_3_13: BITVECTOR(12) ;
flag_3_14: BITVECTOR(12) ;
flag_3_15: BITVECTOR(12) ;

bias_3_0: BITVECTOR(12) ;
bias_3_1: BITVECTOR(12) ;
bias_3_2: BITVECTOR(12) ;
bias_3_3: BITVECTOR(12) ;
bias_3_4: BITVECTOR(12) ;
bias_3_5: BITVECTOR(12) ;
bias_3_6: BITVECTOR(12) ;
bias_3_7: BITVECTOR(12) ;
bias_3_8: BITVECTOR(12) ;
bias_3_9: BITVECTOR(12) ;
bias_3_10: BITVECTOR(12) ;
bias_3_11: BITVECTOR(12) ;
bias_3_12: BITVECTOR(12) ;
bias_3_13: BITVECTOR(12) ;
bias_3_14: BITVECTOR(12) ;
bias_3_15: BITVECTOR(12) ;

before_sbox_mask_4_0: BITVECTOR(4) ;
before_sbox_mask_4_1: BITVECTOR(4) ;
before_sbox_mask_4_2: BITVECTOR(4) ;
before_sbox_mask_4_3: BITVECTOR(4) ;
before_sbox_mask_4_4: BITVECTOR(4) ;
before_sbox_mask_4_5: BITVECTOR(4) ;
before_sbox_mask_4_6: BITVECTOR(4) ;
before_sbox_mask_4_7: BITVECTOR(4) ;
before_sbox_mask_4_8: BITVECTOR(4) ;
before_sbox_mask_4_9: BITVECTOR(4) ;
before_sbox_mask_4_10: BITVECTOR(4) ;
before_sbox_mask_4_11: BITVECTOR(4) ;
before_sbox_mask_4_12: BITVECTOR(4) ;
before_sbox_mask_4_13: BITVECTOR(4) ;
before_sbox_mask_4_14: BITVECTOR(4) ;
before_sbox_mask_4_15: BITVECTOR(4) ;

total_num: BITVECTOR(12) ;
flag_tail: BITVECTOR(12) ;
sum_bias: BITVECTOR(12) ;
total_bias: BITVECTOR(12) ;

ASSERT( linear_dist[0hex00]=0hex08 ) ;
ASSERT( linear_dist[0hex01]=0hex00 ) ;
ASSERT( linear_dist[0hex02]=0hex00 ) ;
ASSERT( linear_dist[0hex03]=0hex00 ) ;
ASSERT( linear_dist[0hex04]=0hex00 ) ;
ASSERT( linear_dist[0hex05]=0hex00 ) ;
ASSERT( linear_dist[0hex06]=0hex00 ) ;
ASSERT( linear_dist[0hex07]=0hex00 ) ;
ASSERT( linear_dist[0hex08]=0hex00 ) ;
ASSERT( linear_dist[0hex09]=0hex00 ) ;
ASSERT( linear_dist[0hex0a]=0hex00 ) ;
ASSERT( linear_dist[0hex0b]=0hex00 ) ;
ASSERT( linear_dist[0hex0c]=0hex00 ) ;
ASSERT( linear_dist[0hex0d]=0hex00 ) ;
ASSERT( linear_dist[0hex0e]=0hex00 ) ;
ASSERT( linear_dist[0hex0f]=0hex00 ) ;
ASSERT( linear_dist[0hex10]=0hex00 ) ;
ASSERT( linear_dist[0hex11]=0hex00 ) ;
ASSERT( linear_dist[0hex12]=0hex00 ) ;
ASSERT( linear_dist[0hex13]=0hex04 ) ;
ASSERT( linear_dist[0hex14]=0hex00 ) ;
ASSERT( linear_dist[0hex15]=0hex00 ) ;
ASSERT( linear_dist[0hex16]=0hex00 ) ;
ASSERT( linear_dist[0hex17]=0hex04 ) ;
ASSERT( linear_dist[0hex18]=0hex02 ) ;
ASSERT( linear_dist[0hex19]=0hex02 ) ;
ASSERT( linear_dist[0hex1a]=0hex02 ) ;
ASSERT( linear_dist[0hex1b]=0hex02 ) ;
ASSERT( linear_dist[0hex1c]=0hex02 ) ;
ASSERT( linear_dist[0hex1d]=0hex02 ) ;
ASSERT( linear_dist[0hex1e]=0hex02 ) ;
ASSERT( linear_dist[0hex1f]=0hex02 ) ;
ASSERT( linear_dist[0hex20]=0hex00 ) ;
ASSERT( linear_dist[0hex21]=0hex00 ) ;
ASSERT( linear_dist[0hex22]=0hex02 ) ;
ASSERT( linear_dist[0hex23]=0hex02 ) ;
ASSERT( linear_dist[0hex24]=0hex02 ) ;
ASSERT( linear_dist[0hex25]=0hex02 ) ;
ASSERT( linear_dist[0hex26]=0hex00 ) ;
ASSERT( linear_dist[0hex27]=0hex00 ) ;
ASSERT( linear_dist[0hex28]=0hex00 ) ;
ASSERT( linear_dist[0hex29]=0hex00 ) ;
ASSERT( linear_dist[0hex2a]=0hex02 ) ;
ASSERT( linear_dist[0hex2b]=0hex02 ) ;
ASSERT( linear_dist[0hex2c]=0hex02 ) ;
ASSERT( linear_dist[0hex2d]=0hex02 ) ;
ASSERT( linear_dist[0hex2e]=0hex04 ) ;
ASSERT( linear_dist[0hex2f]=0hex04 ) ;
ASSERT( linear_dist[0hex30]=0hex00 ) ;
ASSERT( linear_dist[0hex31]=0hex00 ) ;
ASSERT( linear_dist[0hex32]=0hex02 ) ;
ASSERT( linear_dist[0hex33]=0hex02 ) ;
ASSERT( linear_dist[0hex34]=0hex02 ) ;
ASSERT( linear_dist[0hex35]=0hex02 ) ;
ASSERT( linear_dist[0hex36]=0hex04 ) ;
ASSERT( linear_dist[0hex37]=0hex00 ) ;
ASSERT( linear_dist[0hex38]=0hex02 ) ;
ASSERT( linear_dist[0hex39]=0hex02 ) ;
ASSERT( linear_dist[0hex3a]=0hex00 ) ;
ASSERT( linear_dist[0hex3b]=0hex00 ) ;
ASSERT( linear_dist[0hex3c]=0hex00 ) ;
ASSERT( linear_dist[0hex3d]=0hex04 ) ;
ASSERT( linear_dist[0hex3e]=0hex02 ) ;
ASSERT( linear_dist[0hex3f]=0hex02 ) ;
ASSERT( linear_dist[0hex40]=0hex00 ) ;
ASSERT( linear_dist[0hex41]=0hex00 ) ;
ASSERT( linear_dist[0hex42]=0hex00 ) ;
ASSERT( linear_dist[0hex43]=0hex00 ) ;
ASSERT( linear_dist[0hex44]=0hex00 ) ;
ASSERT( linear_dist[0hex45]=0hex00 ) ;
ASSERT( linear_dist[0hex46]=0hex00 ) ;
ASSERT( linear_dist[0hex47]=0hex00 ) ;
ASSERT( linear_dist[0hex48]=0hex00 ) ;
ASSERT( linear_dist[0hex49]=0hex04 ) ;
ASSERT( linear_dist[0hex4a]=0hex04 ) ;
ASSERT( linear_dist[0hex4b]=0hex00 ) ;
ASSERT( linear_dist[0hex4c]=0hex04 ) ;
ASSERT( linear_dist[0hex4d]=0hex00 ) ;
ASSERT( linear_dist[0hex4e]=0hex00 ) ;
ASSERT( linear_dist[0hex4f]=0hex04 ) ;
ASSERT( linear_dist[0hex50]=0hex00 ) ;
ASSERT( linear_dist[0hex51]=0hex00 ) ;
ASSERT( linear_dist[0hex52]=0hex00 ) ;
ASSERT( linear_dist[0hex53]=0hex04 ) ;
ASSERT( linear_dist[0hex54]=0hex00 ) ;
ASSERT( linear_dist[0hex55]=0hex00 ) ;
ASSERT( linear_dist[0hex56]=0hex00 ) ;
ASSERT( linear_dist[0hex57]=0hex04 ) ;
ASSERT( linear_dist[0hex58]=0hex02 ) ;
ASSERT( linear_dist[0hex59]=0hex02 ) ;
ASSERT( linear_dist[0hex5a]=0hex02 ) ;
ASSERT( linear_dist[0hex5b]=0hex02 ) ;
ASSERT( linear_dist[0hex5c]=0hex02 ) ;
ASSERT( linear_dist[0hex5d]=0hex02 ) ;
ASSERT( linear_dist[0hex5e]=0hex02 ) ;
ASSERT( linear_dist[0hex5f]=0hex02 ) ;
ASSERT( linear_dist[0hex60]=0hex00 ) ;
ASSERT( linear_dist[0hex61]=0hex04 ) ;
ASSERT( linear_dist[0hex62]=0hex02 ) ;
ASSERT( linear_dist[0hex63]=0hex02 ) ;
ASSERT( linear_dist[0hex64]=0hex02 ) ;
ASSERT( linear_dist[0hex65]=0hex02 ) ;
ASSERT( linear_dist[0hex66]=0hex04 ) ;
ASSERT( linear_dist[0hex67]=0hex00 ) ;
ASSERT( linear_dist[0hex68]=0hex00 ) ;
ASSERT( linear_dist[0hex69]=0hex00 ) ;
ASSERT( linear_dist[0hex6a]=0hex02 ) ;
ASSERT( linear_dist[0hex6b]=0hex02 ) ;
ASSERT( linear_dist[0hex6c]=0hex02 ) ;
ASSERT( linear_dist[0hex6d]=0hex02 ) ;
ASSERT( linear_dist[0hex6e]=0hex00 ) ;
ASSERT( linear_dist[0hex6f]=0hex00 ) ;
ASSERT( linear_dist[0hex70]=0hex00 ) ;
ASSERT( linear_dist[0hex71]=0hex04 ) ;
ASSERT( linear_dist[0hex72]=0hex02 ) ;
ASSERT( linear_dist[0hex73]=0hex02 ) ;
ASSERT( linear_dist[0hex74]=0hex02 ) ;
ASSERT( linear_dist[0hex75]=0hex02 ) ;
ASSERT( linear_dist[0hex76]=0hex00 ) ;
ASSERT( linear_dist[0hex77]=0hex00 ) ;
ASSERT( linear_dist[0hex78]=0hex02 ) ;
ASSERT( linear_dist[0hex79]=0hex02 ) ;
ASSERT( linear_dist[0hex7a]=0hex00 ) ;
ASSERT( linear_dist[0hex7b]=0hex00 ) ;
ASSERT( linear_dist[0hex7c]=0hex04 ) ;
ASSERT( linear_dist[0hex7d]=0hex00 ) ;
ASSERT( linear_dist[0hex7e]=0hex02 ) ;
ASSERT( linear_dist[0hex7f]=0hex02 ) ;
ASSERT( linear_dist[0hex80]=0hex00 ) ;
ASSERT( linear_dist[0hex81]=0hex00 ) ;
ASSERT( linear_dist[0hex82]=0hex00 ) ;
ASSERT( linear_dist[0hex83]=0hex00 ) ;
ASSERT( linear_dist[0hex84]=0hex00 ) ;
ASSERT( linear_dist[0hex85]=0hex04 ) ;
ASSERT( linear_dist[0hex86]=0hex00 ) ;
ASSERT( linear_dist[0hex87]=0hex04 ) ;
ASSERT( linear_dist[0hex88]=0hex02 ) ;
ASSERT( linear_dist[0hex89]=0hex02 ) ;
ASSERT( linear_dist[0hex8a]=0hex02 ) ;
ASSERT( linear_dist[0hex8b]=0hex02 ) ;
ASSERT( linear_dist[0hex8c]=0hex02 ) ;
ASSERT( linear_dist[0hex8d]=0hex02 ) ;
ASSERT( linear_dist[0hex8e]=0hex02 ) ;
ASSERT( linear_dist[0hex8f]=0hex02 ) ;
ASSERT( linear_dist[0hex90]=0hex00 ) ;
ASSERT( linear_dist[0hex91]=0hex00 ) ;
ASSERT( linear_dist[0hex92]=0hex04 ) ;
ASSERT( linear_dist[0hex93]=0hex00 ) ;
ASSERT( linear_dist[0hex94]=0hex04 ) ;
ASSERT( linear_dist[0hex95]=0hex00 ) ;
ASSERT( linear_dist[0hex96]=0hex00 ) ;
ASSERT( linear_dist[0hex97]=0hex00 ) ;
ASSERT( linear_dist[0hex98]=0hex00 ) ;
ASSERT( linear_dist[0hex99]=0hex00 ) ;
ASSERT( linear_dist[0hex9a]=0hex00 ) ;
ASSERT( linear_dist[0hex9b]=0hex04 ) ;
ASSERT( linear_dist[0hex9c]=0hex00 ) ;
ASSERT( linear_dist[0hex9d]=0hex04 ) ;
ASSERT( linear_dist[0hex9e]=0hex00 ) ;
ASSERT( linear_dist[0hex9f]=0hex00 ) ;
ASSERT( linear_dist[0hexa0]=0hex00 ) ;
ASSERT( linear_dist[0hexa1]=0hex00 ) ;
ASSERT( linear_dist[0hexa2]=0hex02 ) ;
ASSERT( linear_dist[0hexa3]=0hex02 ) ;
ASSERT( linear_dist[0hexa4]=0hex02 ) ;
ASSERT( linear_dist[0hexa5]=0hex02 ) ;
ASSERT( linear_dist[0hexa6]=0hex04 ) ;
ASSERT( linear_dist[0hexa7]=0hex00 ) ;
ASSERT( linear_dist[0hexa8]=0hex02 ) ;
ASSERT( linear_dist[0hexa9]=0hex02 ) ;
ASSERT( linear_dist[0hexaa]=0hex00 ) ;
ASSERT( linear_dist[0hexab]=0hex04 ) ;
ASSERT( linear_dist[0hexac]=0hex00 ) ;
ASSERT( linear_dist[0hexad]=0hex00 ) ;
ASSERT( linear_dist[0hexae]=0hex02 ) ;
ASSERT( linear_dist[0hexaf]=0hex02 ) ;
ASSERT( linear_dist[0hexb0]=0hex00 ) ;
ASSERT( linear_dist[0hexb1]=0hex00 ) ;
ASSERT( linear_dist[0hexb2]=0hex02 ) ;
ASSERT( linear_dist[0hexb3]=0hex02 ) ;
ASSERT( linear_dist[0hexb4]=0hex02 ) ;
ASSERT( linear_dist[0hexb5]=0hex02 ) ;
ASSERT( linear_dist[0hexb6]=0hex00 ) ;
ASSERT( linear_dist[0hexb7]=0hex00 ) ;
ASSERT( linear_dist[0hexb8]=0hex04 ) ;
ASSERT( linear_dist[0hexb9]=0hex04 ) ;
ASSERT( linear_dist[0hexba]=0hex02 ) ;
ASSERT( linear_dist[0hexbb]=0hex02 ) ;
ASSERT( linear_dist[0hexbc]=0hex02 ) ;
ASSERT( linear_dist[0hexbd]=0hex02 ) ;
ASSERT( linear_dist[0hexbe]=0hex00 ) ;
ASSERT( linear_dist[0hexbf]=0hex00 ) ;
ASSERT( linear_dist[0hexc0]=0hex00 ) ;
ASSERT( linear_dist[0hexc1]=0hex00 ) ;
ASSERT( linear_dist[0hexc2]=0hex00 ) ;
ASSERT( linear_dist[0hexc3]=0hex00 ) ;
ASSERT( linear_dist[0hexc4]=0hex00 ) ;
ASSERT( linear_dist[0hexc5]=0hex04 ) ;
ASSERT( linear_dist[0hexc6]=0hex00 ) ;
ASSERT( linear_dist[0hexc7]=0hex04 ) ;
ASSERT( linear_dist[0hexc8]=0hex02 ) ;
ASSERT( linear_dist[0hexc9]=0hex02 ) ;
ASSERT( linear_dist[0hexca]=0hex02 ) ;
ASSERT( linear_dist[0hexcb]=0hex02 ) ;
ASSERT( linear_dist[0hexcc]=0hex02 ) ;
ASSERT( linear_dist[0hexcd]=0hex02 ) ;
ASSERT( linear_dist[0hexce]=0hex02 ) ;
ASSERT( linear_dist[0hexcf]=0hex02 ) ;
ASSERT( linear_dist[0hexd0]=0hex00 ) ;
ASSERT( linear_dist[0hexd1]=0hex00 ) ;
ASSERT( linear_dist[0hexd2]=0hex04 ) ;
ASSERT( linear_dist[0hexd3]=0hex00 ) ;
ASSERT( linear_dist[0hexd4]=0hex04 ) ;
ASSERT( linear_dist[0hexd5]=0hex00 ) ;
ASSERT( linear_dist[0hexd6]=0hex00 ) ;
ASSERT( linear_dist[0hexd7]=0hex00 ) ;
ASSERT( linear_dist[0hexd8]=0hex04 ) ;
ASSERT( linear_dist[0hexd9]=0hex00 ) ;
ASSERT( linear_dist[0hexda]=0hex00 ) ;
ASSERT( linear_dist[0hexdb]=0hex00 ) ;
ASSERT( linear_dist[0hexdc]=0hex00 ) ;
ASSERT( linear_dist[0hexdd]=0hex00 ) ;
ASSERT( linear_dist[0hexde]=0hex04 ) ;
ASSERT( linear_dist[0hexdf]=0hex00 ) ;
ASSERT( linear_dist[0hexe0]=0hex00 ) ;
ASSERT( linear_dist[0hexe1]=0hex04 ) ;
ASSERT( linear_dist[0hexe2]=0hex02 ) ;
ASSERT( linear_dist[0hexe3]=0hex02 ) ;
ASSERT( linear_dist[0hexe4]=0hex02 ) ;
ASSERT( linear_dist[0hexe5]=0hex02 ) ;
ASSERT( linear_dist[0hexe6]=0hex00 ) ;
ASSERT( linear_dist[0hexe7]=0hex00 ) ;
ASSERT( linear_dist[0hexe8]=0hex02 ) ;
ASSERT( linear_dist[0hexe9]=0hex02 ) ;
ASSERT( linear_dist[0hexea]=0hex04 ) ;
ASSERT( linear_dist[0hexeb]=0hex00 ) ;
ASSERT( linear_dist[0hexec]=0hex00 ) ;
ASSERT( linear_dist[0hexed]=0hex00 ) ;
ASSERT( linear_dist[0hexee]=0hex02 ) ;
ASSERT( linear_dist[0hexef]=0hex02 ) ;
ASSERT( linear_dist[0hexf0]=0hex00 ) ;
ASSERT( linear_dist[0hexf1]=0hex04 ) ;
ASSERT( linear_dist[0hexf2]=0hex02 ) ;
ASSERT( linear_dist[0hexf3]=0hex02 ) ;
ASSERT( linear_dist[0hexf4]=0hex02 ) ;
ASSERT( linear_dist[0hexf5]=0hex02 ) ;
ASSERT( linear_dist[0hexf6]=0hex04 ) ;
ASSERT( linear_dist[0hexf7]=0hex00 ) ;
ASSERT( linear_dist[0hexf8]=0hex00 ) ;
ASSERT( linear_dist[0hexf9]=0hex00 ) ;
ASSERT( linear_dist[0hexfa]=0hex02 ) ;
ASSERT( linear_dist[0hexfb]=0hex02 ) ;
ASSERT( linear_dist[0hexfc]=0hex02 ) ;
ASSERT( linear_dist[0hexfd]=0hex02 ) ;
ASSERT( linear_dist[0hexfe]=0hex00 ) ;
ASSERT( linear_dist[0hexff]=0hex00 ) ;

ASSERT( before_rotation_mask_0_0 = after_sbox_mask_0_1@after_sbox_mask_0_0@after_sbox_mask_0_3@after_sbox_mask_0_2 ) ;
ASSERT( before_rotation_mask_0_1 = after_sbox_mask_0_5@after_sbox_mask_0_4@after_sbox_mask_0_7@after_sbox_mask_0_6 ) ;
ASSERT( before_rotation_mask_0_2 = after_sbox_mask_0_9@after_sbox_mask_0_8@after_sbox_mask_0_11@after_sbox_mask_0_10 ) ;
ASSERT( before_rotation_mask_0_3 = after_sbox_mask_0_13@after_sbox_mask_0_12@after_sbox_mask_0_15@after_sbox_mask_0_14 ) ;

ASSERT( after_rotation_mask_0_0 = before_rotation_mask_0_0[14:0]@before_rotation_mask_0_0[15:15] ) ;
ASSERT( after_rotation_mask_0_1 = before_rotation_mask_0_1[11:0]@before_rotation_mask_0_1[15:12] ) ;
ASSERT( after_rotation_mask_0_2 = before_rotation_mask_0_2[8:0]@before_rotation_mask_0_2[15:9] ) ;
ASSERT( after_rotation_mask_0_3 = before_rotation_mask_0_3[6:0]@before_rotation_mask_0_3[15:7] ) ;

ASSERT( branch_0_0_another = BVXOR( branch_0_0_up, branch_0_0_down ) ) ;
ASSERT( branch_0_1_another = BVXOR( branch_0_1_up, branch_0_1_down ) ) ;
ASSERT( branch_0_2_another = BVXOR( branch_0_2_up, branch_0_2_down ) ) ;
ASSERT( branch_0_3_another = BVXOR( branch_0_3_up, branch_0_3_down ) ) ;
ASSERT( xor_0_0_up = xor_0_0_down ) ;
ASSERT( xor_0_0_up = xor_0_0_another ) ;
ASSERT( xor_0_1_up = xor_0_1_down ) ;
ASSERT( xor_0_1_up = xor_0_1_another ) ;
ASSERT( xor_0_2_up = xor_0_2_down ) ;
ASSERT( xor_0_2_up = xor_0_2_another ) ;
ASSERT( xor_0_3_up = xor_0_3_down ) ;
ASSERT( xor_0_3_up = xor_0_3_another ) ;
ASSERT( after_rotation_mask_0_0 = branch_0_0_up );
ASSERT( after_rotation_mask_0_1 = xor_0_1_up );
ASSERT( after_rotation_mask_0_2 = xor_0_2_up );
ASSERT( after_rotation_mask_0_3 = branch_0_3_up );

ASSERT( after_blockxor_mask_0_0 = xor_0_0_down );
ASSERT( after_blockxor_mask_0_1 = branch_0_1_down );
ASSERT( after_blockxor_mask_0_2 = branch_0_2_down );
ASSERT( after_blockxor_mask_0_3 = xor_0_3_down );

ASSERT( branch_0_0_another = xor_0_2_another );
ASSERT( branch_0_1_another = xor_0_0_another );
ASSERT( branch_0_2_another = xor_0_3_another );
ASSERT( branch_0_3_another = xor_0_1_another );

ASSERT( branch_0_0_down = xor_0_0_up );
ASSERT( branch_0_1_up = xor_0_1_down );
ASSERT( branch_0_2_up = xor_0_2_down );
ASSERT( branch_0_3_down = xor_0_3_up );

ASSERT( before_sbox_mask_1_0 = after_blockxor_mask_0_0[3:0] ) ;
ASSERT( before_sbox_mask_1_1 = after_blockxor_mask_0_0[7:4] ) ;
ASSERT( before_sbox_mask_1_2 = after_blockxor_mask_0_0[11:8] ) ;
ASSERT( before_sbox_mask_1_3 = after_blockxor_mask_0_0[15:12] ) ;
ASSERT( before_sbox_mask_1_4 = after_blockxor_mask_0_1[3:0] ) ;
ASSERT( before_sbox_mask_1_5 = after_blockxor_mask_0_1[7:4] ) ;
ASSERT( before_sbox_mask_1_6 = after_blockxor_mask_0_1[11:8] ) ;
ASSERT( before_sbox_mask_1_7 = after_blockxor_mask_0_1[15:12] ) ;
ASSERT( before_sbox_mask_1_8 = after_blockxor_mask_0_2[3:0] ) ;
ASSERT( before_sbox_mask_1_9 = after_blockxor_mask_0_2[7:4] ) ;
ASSERT( before_sbox_mask_1_10 = after_blockxor_mask_0_2[11:8] ) ;
ASSERT( before_sbox_mask_1_11 = after_blockxor_mask_0_2[15:12] ) ;
ASSERT( before_sbox_mask_1_12 = after_blockxor_mask_0_3[3:0] ) ;
ASSERT( before_sbox_mask_1_13 = after_blockxor_mask_0_3[7:4] ) ;
ASSERT( before_sbox_mask_1_14 = after_blockxor_mask_0_3[11:8] ) ;
ASSERT( before_sbox_mask_1_15 = after_blockxor_mask_0_3[15:12] ) ;

ASSERT( IF ( before_sbox_mask_0_0=0hex0 AND after_sbox_mask_0_0=0hex0 ) THEN flag_0_0=0hex000 ELSE flag_0_0=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_0_1=0hex0 AND after_sbox_mask_0_1=0hex0 ) THEN flag_0_1=0hex000 ELSE flag_0_1=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_0_2=0hex0 AND after_sbox_mask_0_2=0hex0 ) THEN flag_0_2=0hex000 ELSE flag_0_2=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_0_3=0hex0 AND after_sbox_mask_0_3=0hex0 ) THEN flag_0_3=0hex000 ELSE flag_0_3=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_0_4=0hex0 AND after_sbox_mask_0_4=0hex0 ) THEN flag_0_4=0hex000 ELSE flag_0_4=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_0_5=0hex0 AND after_sbox_mask_0_5=0hex0 ) THEN flag_0_5=0hex000 ELSE flag_0_5=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_0_6=0hex0 AND after_sbox_mask_0_6=0hex0 ) THEN flag_0_6=0hex000 ELSE flag_0_6=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_0_7=0hex0 AND after_sbox_mask_0_7=0hex0 ) THEN flag_0_7=0hex000 ELSE flag_0_7=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_0_8=0hex0 AND after_sbox_mask_0_8=0hex0 ) THEN flag_0_8=0hex000 ELSE flag_0_8=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_0_9=0hex0 AND after_sbox_mask_0_9=0hex0 ) THEN flag_0_9=0hex000 ELSE flag_0_9=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_0_10=0hex0 AND after_sbox_mask_0_10=0hex0 ) THEN flag_0_10=0hex000 ELSE flag_0_10=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_0_11=0hex0 AND after_sbox_mask_0_11=0hex0 ) THEN flag_0_11=0hex000 ELSE flag_0_11=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_0_12=0hex0 AND after_sbox_mask_0_12=0hex0 ) THEN flag_0_12=0hex000 ELSE flag_0_12=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_0_13=0hex0 AND after_sbox_mask_0_13=0hex0 ) THEN flag_0_13=0hex000 ELSE flag_0_13=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_0_14=0hex0 AND after_sbox_mask_0_14=0hex0 ) THEN flag_0_14=0hex000 ELSE flag_0_14=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_0_15=0hex0 AND after_sbox_mask_0_15=0hex0 ) THEN flag_0_15=0hex000 ELSE flag_0_15=0hex001 ENDIF ) ;

ASSERT( ( linear_dist[before_sbox_mask_0_0@after_sbox_mask_0_0]=0hex00 ) => ( bias_0_0=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_0@after_sbox_mask_0_0]=0hex02 ) => ( bias_0_0=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_0@after_sbox_mask_0_0]=0hex04 ) => ( bias_0_0=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_0@after_sbox_mask_0_0]=0hex08 ) => ( bias_0_0=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_1@after_sbox_mask_0_1]=0hex00 ) => ( bias_0_1=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_1@after_sbox_mask_0_1]=0hex02 ) => ( bias_0_1=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_1@after_sbox_mask_0_1]=0hex04 ) => ( bias_0_1=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_1@after_sbox_mask_0_1]=0hex08 ) => ( bias_0_1=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_2@after_sbox_mask_0_2]=0hex00 ) => ( bias_0_2=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_2@after_sbox_mask_0_2]=0hex02 ) => ( bias_0_2=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_2@after_sbox_mask_0_2]=0hex04 ) => ( bias_0_2=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_2@after_sbox_mask_0_2]=0hex08 ) => ( bias_0_2=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_3@after_sbox_mask_0_3]=0hex00 ) => ( bias_0_3=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_3@after_sbox_mask_0_3]=0hex02 ) => ( bias_0_3=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_3@after_sbox_mask_0_3]=0hex04 ) => ( bias_0_3=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_3@after_sbox_mask_0_3]=0hex08 ) => ( bias_0_3=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_4@after_sbox_mask_0_4]=0hex00 ) => ( bias_0_4=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_4@after_sbox_mask_0_4]=0hex02 ) => ( bias_0_4=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_4@after_sbox_mask_0_4]=0hex04 ) => ( bias_0_4=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_4@after_sbox_mask_0_4]=0hex08 ) => ( bias_0_4=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_5@after_sbox_mask_0_5]=0hex00 ) => ( bias_0_5=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_5@after_sbox_mask_0_5]=0hex02 ) => ( bias_0_5=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_5@after_sbox_mask_0_5]=0hex04 ) => ( bias_0_5=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_5@after_sbox_mask_0_5]=0hex08 ) => ( bias_0_5=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_6@after_sbox_mask_0_6]=0hex00 ) => ( bias_0_6=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_6@after_sbox_mask_0_6]=0hex02 ) => ( bias_0_6=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_6@after_sbox_mask_0_6]=0hex04 ) => ( bias_0_6=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_6@after_sbox_mask_0_6]=0hex08 ) => ( bias_0_6=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_7@after_sbox_mask_0_7]=0hex00 ) => ( bias_0_7=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_7@after_sbox_mask_0_7]=0hex02 ) => ( bias_0_7=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_7@after_sbox_mask_0_7]=0hex04 ) => ( bias_0_7=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_7@after_sbox_mask_0_7]=0hex08 ) => ( bias_0_7=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_8@after_sbox_mask_0_8]=0hex00 ) => ( bias_0_8=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_8@after_sbox_mask_0_8]=0hex02 ) => ( bias_0_8=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_8@after_sbox_mask_0_8]=0hex04 ) => ( bias_0_8=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_8@after_sbox_mask_0_8]=0hex08 ) => ( bias_0_8=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_9@after_sbox_mask_0_9]=0hex00 ) => ( bias_0_9=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_9@after_sbox_mask_0_9]=0hex02 ) => ( bias_0_9=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_9@after_sbox_mask_0_9]=0hex04 ) => ( bias_0_9=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_9@after_sbox_mask_0_9]=0hex08 ) => ( bias_0_9=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_10@after_sbox_mask_0_10]=0hex00 ) => ( bias_0_10=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_10@after_sbox_mask_0_10]=0hex02 ) => ( bias_0_10=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_10@after_sbox_mask_0_10]=0hex04 ) => ( bias_0_10=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_10@after_sbox_mask_0_10]=0hex08 ) => ( bias_0_10=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_11@after_sbox_mask_0_11]=0hex00 ) => ( bias_0_11=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_11@after_sbox_mask_0_11]=0hex02 ) => ( bias_0_11=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_11@after_sbox_mask_0_11]=0hex04 ) => ( bias_0_11=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_11@after_sbox_mask_0_11]=0hex08 ) => ( bias_0_11=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_12@after_sbox_mask_0_12]=0hex00 ) => ( bias_0_12=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_12@after_sbox_mask_0_12]=0hex02 ) => ( bias_0_12=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_12@after_sbox_mask_0_12]=0hex04 ) => ( bias_0_12=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_12@after_sbox_mask_0_12]=0hex08 ) => ( bias_0_12=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_13@after_sbox_mask_0_13]=0hex00 ) => ( bias_0_13=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_13@after_sbox_mask_0_13]=0hex02 ) => ( bias_0_13=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_13@after_sbox_mask_0_13]=0hex04 ) => ( bias_0_13=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_13@after_sbox_mask_0_13]=0hex08 ) => ( bias_0_13=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_14@after_sbox_mask_0_14]=0hex00 ) => ( bias_0_14=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_14@after_sbox_mask_0_14]=0hex02 ) => ( bias_0_14=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_14@after_sbox_mask_0_14]=0hex04 ) => ( bias_0_14=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_14@after_sbox_mask_0_14]=0hex08 ) => ( bias_0_14=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_15@after_sbox_mask_0_15]=0hex00 ) => ( bias_0_15=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_15@after_sbox_mask_0_15]=0hex02 ) => ( bias_0_15=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_15@after_sbox_mask_0_15]=0hex04 ) => ( bias_0_15=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_0_15@after_sbox_mask_0_15]=0hex08 ) => ( bias_0_15=0hex000 ) ) ;

ASSERT( NOT( bias_0_0=0hex007 ) ) ;
ASSERT( NOT( bias_0_1=0hex007 ) ) ;
ASSERT( NOT( bias_0_2=0hex007 ) ) ;
ASSERT( NOT( bias_0_3=0hex007 ) ) ;
ASSERT( NOT( bias_0_4=0hex007 ) ) ;
ASSERT( NOT( bias_0_5=0hex007 ) ) ;
ASSERT( NOT( bias_0_6=0hex007 ) ) ;
ASSERT( NOT( bias_0_7=0hex007 ) ) ;
ASSERT( NOT( bias_0_8=0hex007 ) ) ;
ASSERT( NOT( bias_0_9=0hex007 ) ) ;
ASSERT( NOT( bias_0_10=0hex007 ) ) ;
ASSERT( NOT( bias_0_11=0hex007 ) ) ;
ASSERT( NOT( bias_0_12=0hex007 ) ) ;
ASSERT( NOT( bias_0_13=0hex007 ) ) ;
ASSERT( NOT( bias_0_14=0hex007 ) ) ;
ASSERT( NOT( bias_0_15=0hex007 ) ) ;

ASSERT( before_rotation_mask_1_0 = after_sbox_mask_1_1@after_sbox_mask_1_0@after_sbox_mask_1_3@after_sbox_mask_1_2 ) ;
ASSERT( before_rotation_mask_1_1 = after_sbox_mask_1_5@after_sbox_mask_1_4@after_sbox_mask_1_7@after_sbox_mask_1_6 ) ;
ASSERT( before_rotation_mask_1_2 = after_sbox_mask_1_9@after_sbox_mask_1_8@after_sbox_mask_1_11@after_sbox_mask_1_10 ) ;
ASSERT( before_rotation_mask_1_3 = after_sbox_mask_1_13@after_sbox_mask_1_12@after_sbox_mask_1_15@after_sbox_mask_1_14 ) ;

ASSERT( after_rotation_mask_1_0 = before_rotation_mask_1_0[14:0]@before_rotation_mask_1_0[15:15] ) ;
ASSERT( after_rotation_mask_1_1 = before_rotation_mask_1_1[11:0]@before_rotation_mask_1_1[15:12] ) ;
ASSERT( after_rotation_mask_1_2 = before_rotation_mask_1_2[8:0]@before_rotation_mask_1_2[15:9] ) ;
ASSERT( after_rotation_mask_1_3 = before_rotation_mask_1_3[6:0]@before_rotation_mask_1_3[15:7] ) ;

ASSERT( branch_1_0_another = BVXOR( branch_1_0_up, branch_1_0_down ) ) ;
ASSERT( branch_1_1_another = BVXOR( branch_1_1_up, branch_1_1_down ) ) ;
ASSERT( branch_1_2_another = BVXOR( branch_1_2_up, branch_1_2_down ) ) ;
ASSERT( branch_1_3_another = BVXOR( branch_1_3_up, branch_1_3_down ) ) ;
ASSERT( xor_1_0_up = xor_1_0_down ) ;
ASSERT( xor_1_0_up = xor_1_0_another ) ;
ASSERT( xor_1_1_up = xor_1_1_down ) ;
ASSERT( xor_1_1_up = xor_1_1_another ) ;
ASSERT( xor_1_2_up = xor_1_2_down ) ;
ASSERT( xor_1_2_up = xor_1_2_another ) ;
ASSERT( xor_1_3_up = xor_1_3_down ) ;
ASSERT( xor_1_3_up = xor_1_3_another ) ;
ASSERT( after_rotation_mask_1_0 = branch_1_0_up );
ASSERT( after_rotation_mask_1_1 = xor_1_1_up );
ASSERT( after_rotation_mask_1_2 = xor_1_2_up );
ASSERT( after_rotation_mask_1_3 = branch_1_3_up );

ASSERT( after_blockxor_mask_1_0 = xor_1_0_down );
ASSERT( after_blockxor_mask_1_1 = branch_1_1_down );
ASSERT( after_blockxor_mask_1_2 = branch_1_2_down );
ASSERT( after_blockxor_mask_1_3 = xor_1_3_down );

ASSERT( branch_1_0_another = xor_1_2_another );
ASSERT( branch_1_1_another = xor_1_0_another );
ASSERT( branch_1_2_another = xor_1_3_another );
ASSERT( branch_1_3_another = xor_1_1_another );

ASSERT( branch_1_0_down = xor_1_0_up );
ASSERT( branch_1_1_up = xor_1_1_down );
ASSERT( branch_1_2_up = xor_1_2_down );
ASSERT( branch_1_3_down = xor_1_3_up );

ASSERT( before_sbox_mask_2_0 = after_blockxor_mask_1_0[3:0] ) ;
ASSERT( before_sbox_mask_2_1 = after_blockxor_mask_1_0[7:4] ) ;
ASSERT( before_sbox_mask_2_2 = after_blockxor_mask_1_0[11:8] ) ;
ASSERT( before_sbox_mask_2_3 = after_blockxor_mask_1_0[15:12] ) ;
ASSERT( before_sbox_mask_2_4 = after_blockxor_mask_1_1[3:0] ) ;
ASSERT( before_sbox_mask_2_5 = after_blockxor_mask_1_1[7:4] ) ;
ASSERT( before_sbox_mask_2_6 = after_blockxor_mask_1_1[11:8] ) ;
ASSERT( before_sbox_mask_2_7 = after_blockxor_mask_1_1[15:12] ) ;
ASSERT( before_sbox_mask_2_8 = after_blockxor_mask_1_2[3:0] ) ;
ASSERT( before_sbox_mask_2_9 = after_blockxor_mask_1_2[7:4] ) ;
ASSERT( before_sbox_mask_2_10 = after_blockxor_mask_1_2[11:8] ) ;
ASSERT( before_sbox_mask_2_11 = after_blockxor_mask_1_2[15:12] ) ;
ASSERT( before_sbox_mask_2_12 = after_blockxor_mask_1_3[3:0] ) ;
ASSERT( before_sbox_mask_2_13 = after_blockxor_mask_1_3[7:4] ) ;
ASSERT( before_sbox_mask_2_14 = after_blockxor_mask_1_3[11:8] ) ;
ASSERT( before_sbox_mask_2_15 = after_blockxor_mask_1_3[15:12] ) ;

ASSERT( IF ( before_sbox_mask_1_0=0hex0 AND after_sbox_mask_1_0=0hex0 ) THEN flag_1_0=0hex000 ELSE flag_1_0=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_1_1=0hex0 AND after_sbox_mask_1_1=0hex0 ) THEN flag_1_1=0hex000 ELSE flag_1_1=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_1_2=0hex0 AND after_sbox_mask_1_2=0hex0 ) THEN flag_1_2=0hex000 ELSE flag_1_2=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_1_3=0hex0 AND after_sbox_mask_1_3=0hex0 ) THEN flag_1_3=0hex000 ELSE flag_1_3=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_1_4=0hex0 AND after_sbox_mask_1_4=0hex0 ) THEN flag_1_4=0hex000 ELSE flag_1_4=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_1_5=0hex0 AND after_sbox_mask_1_5=0hex0 ) THEN flag_1_5=0hex000 ELSE flag_1_5=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_1_6=0hex0 AND after_sbox_mask_1_6=0hex0 ) THEN flag_1_6=0hex000 ELSE flag_1_6=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_1_7=0hex0 AND after_sbox_mask_1_7=0hex0 ) THEN flag_1_7=0hex000 ELSE flag_1_7=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_1_8=0hex0 AND after_sbox_mask_1_8=0hex0 ) THEN flag_1_8=0hex000 ELSE flag_1_8=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_1_9=0hex0 AND after_sbox_mask_1_9=0hex0 ) THEN flag_1_9=0hex000 ELSE flag_1_9=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_1_10=0hex0 AND after_sbox_mask_1_10=0hex0 ) THEN flag_1_10=0hex000 ELSE flag_1_10=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_1_11=0hex0 AND after_sbox_mask_1_11=0hex0 ) THEN flag_1_11=0hex000 ELSE flag_1_11=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_1_12=0hex0 AND after_sbox_mask_1_12=0hex0 ) THEN flag_1_12=0hex000 ELSE flag_1_12=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_1_13=0hex0 AND after_sbox_mask_1_13=0hex0 ) THEN flag_1_13=0hex000 ELSE flag_1_13=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_1_14=0hex0 AND after_sbox_mask_1_14=0hex0 ) THEN flag_1_14=0hex000 ELSE flag_1_14=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_1_15=0hex0 AND after_sbox_mask_1_15=0hex0 ) THEN flag_1_15=0hex000 ELSE flag_1_15=0hex001 ENDIF ) ;

ASSERT( ( linear_dist[before_sbox_mask_1_0@after_sbox_mask_1_0]=0hex00 ) => ( bias_1_0=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_0@after_sbox_mask_1_0]=0hex02 ) => ( bias_1_0=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_0@after_sbox_mask_1_0]=0hex04 ) => ( bias_1_0=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_0@after_sbox_mask_1_0]=0hex08 ) => ( bias_1_0=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_1@after_sbox_mask_1_1]=0hex00 ) => ( bias_1_1=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_1@after_sbox_mask_1_1]=0hex02 ) => ( bias_1_1=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_1@after_sbox_mask_1_1]=0hex04 ) => ( bias_1_1=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_1@after_sbox_mask_1_1]=0hex08 ) => ( bias_1_1=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_2@after_sbox_mask_1_2]=0hex00 ) => ( bias_1_2=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_2@after_sbox_mask_1_2]=0hex02 ) => ( bias_1_2=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_2@after_sbox_mask_1_2]=0hex04 ) => ( bias_1_2=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_2@after_sbox_mask_1_2]=0hex08 ) => ( bias_1_2=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_3@after_sbox_mask_1_3]=0hex00 ) => ( bias_1_3=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_3@after_sbox_mask_1_3]=0hex02 ) => ( bias_1_3=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_3@after_sbox_mask_1_3]=0hex04 ) => ( bias_1_3=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_3@after_sbox_mask_1_3]=0hex08 ) => ( bias_1_3=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_4@after_sbox_mask_1_4]=0hex00 ) => ( bias_1_4=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_4@after_sbox_mask_1_4]=0hex02 ) => ( bias_1_4=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_4@after_sbox_mask_1_4]=0hex04 ) => ( bias_1_4=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_4@after_sbox_mask_1_4]=0hex08 ) => ( bias_1_4=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_5@after_sbox_mask_1_5]=0hex00 ) => ( bias_1_5=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_5@after_sbox_mask_1_5]=0hex02 ) => ( bias_1_5=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_5@after_sbox_mask_1_5]=0hex04 ) => ( bias_1_5=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_5@after_sbox_mask_1_5]=0hex08 ) => ( bias_1_5=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_6@after_sbox_mask_1_6]=0hex00 ) => ( bias_1_6=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_6@after_sbox_mask_1_6]=0hex02 ) => ( bias_1_6=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_6@after_sbox_mask_1_6]=0hex04 ) => ( bias_1_6=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_6@after_sbox_mask_1_6]=0hex08 ) => ( bias_1_6=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_7@after_sbox_mask_1_7]=0hex00 ) => ( bias_1_7=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_7@after_sbox_mask_1_7]=0hex02 ) => ( bias_1_7=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_7@after_sbox_mask_1_7]=0hex04 ) => ( bias_1_7=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_7@after_sbox_mask_1_7]=0hex08 ) => ( bias_1_7=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_8@after_sbox_mask_1_8]=0hex00 ) => ( bias_1_8=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_8@after_sbox_mask_1_8]=0hex02 ) => ( bias_1_8=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_8@after_sbox_mask_1_8]=0hex04 ) => ( bias_1_8=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_8@after_sbox_mask_1_8]=0hex08 ) => ( bias_1_8=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_9@after_sbox_mask_1_9]=0hex00 ) => ( bias_1_9=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_9@after_sbox_mask_1_9]=0hex02 ) => ( bias_1_9=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_9@after_sbox_mask_1_9]=0hex04 ) => ( bias_1_9=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_9@after_sbox_mask_1_9]=0hex08 ) => ( bias_1_9=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_10@after_sbox_mask_1_10]=0hex00 ) => ( bias_1_10=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_10@after_sbox_mask_1_10]=0hex02 ) => ( bias_1_10=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_10@after_sbox_mask_1_10]=0hex04 ) => ( bias_1_10=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_10@after_sbox_mask_1_10]=0hex08 ) => ( bias_1_10=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_11@after_sbox_mask_1_11]=0hex00 ) => ( bias_1_11=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_11@after_sbox_mask_1_11]=0hex02 ) => ( bias_1_11=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_11@after_sbox_mask_1_11]=0hex04 ) => ( bias_1_11=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_11@after_sbox_mask_1_11]=0hex08 ) => ( bias_1_11=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_12@after_sbox_mask_1_12]=0hex00 ) => ( bias_1_12=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_12@after_sbox_mask_1_12]=0hex02 ) => ( bias_1_12=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_12@after_sbox_mask_1_12]=0hex04 ) => ( bias_1_12=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_12@after_sbox_mask_1_12]=0hex08 ) => ( bias_1_12=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_13@after_sbox_mask_1_13]=0hex00 ) => ( bias_1_13=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_13@after_sbox_mask_1_13]=0hex02 ) => ( bias_1_13=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_13@after_sbox_mask_1_13]=0hex04 ) => ( bias_1_13=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_13@after_sbox_mask_1_13]=0hex08 ) => ( bias_1_13=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_14@after_sbox_mask_1_14]=0hex00 ) => ( bias_1_14=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_14@after_sbox_mask_1_14]=0hex02 ) => ( bias_1_14=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_14@after_sbox_mask_1_14]=0hex04 ) => ( bias_1_14=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_14@after_sbox_mask_1_14]=0hex08 ) => ( bias_1_14=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_15@after_sbox_mask_1_15]=0hex00 ) => ( bias_1_15=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_15@after_sbox_mask_1_15]=0hex02 ) => ( bias_1_15=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_15@after_sbox_mask_1_15]=0hex04 ) => ( bias_1_15=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_1_15@after_sbox_mask_1_15]=0hex08 ) => ( bias_1_15=0hex000 ) ) ;

ASSERT( NOT( bias_1_0=0hex007 ) ) ;
ASSERT( NOT( bias_1_1=0hex007 ) ) ;
ASSERT( NOT( bias_1_2=0hex007 ) ) ;
ASSERT( NOT( bias_1_3=0hex007 ) ) ;
ASSERT( NOT( bias_1_4=0hex007 ) ) ;
ASSERT( NOT( bias_1_5=0hex007 ) ) ;
ASSERT( NOT( bias_1_6=0hex007 ) ) ;
ASSERT( NOT( bias_1_7=0hex007 ) ) ;
ASSERT( NOT( bias_1_8=0hex007 ) ) ;
ASSERT( NOT( bias_1_9=0hex007 ) ) ;
ASSERT( NOT( bias_1_10=0hex007 ) ) ;
ASSERT( NOT( bias_1_11=0hex007 ) ) ;
ASSERT( NOT( bias_1_12=0hex007 ) ) ;
ASSERT( NOT( bias_1_13=0hex007 ) ) ;
ASSERT( NOT( bias_1_14=0hex007 ) ) ;
ASSERT( NOT( bias_1_15=0hex007 ) ) ;

ASSERT( before_rotation_mask_2_0 = after_sbox_mask_2_1@after_sbox_mask_2_0@after_sbox_mask_2_3@after_sbox_mask_2_2 ) ;
ASSERT( before_rotation_mask_2_1 = after_sbox_mask_2_5@after_sbox_mask_2_4@after_sbox_mask_2_7@after_sbox_mask_2_6 ) ;
ASSERT( before_rotation_mask_2_2 = after_sbox_mask_2_9@after_sbox_mask_2_8@after_sbox_mask_2_11@after_sbox_mask_2_10 ) ;
ASSERT( before_rotation_mask_2_3 = after_sbox_mask_2_13@after_sbox_mask_2_12@after_sbox_mask_2_15@after_sbox_mask_2_14 ) ;

ASSERT( after_rotation_mask_2_0 = before_rotation_mask_2_0[14:0]@before_rotation_mask_2_0[15:15] ) ;
ASSERT( after_rotation_mask_2_1 = before_rotation_mask_2_1[11:0]@before_rotation_mask_2_1[15:12] ) ;
ASSERT( after_rotation_mask_2_2 = before_rotation_mask_2_2[8:0]@before_rotation_mask_2_2[15:9] ) ;
ASSERT( after_rotation_mask_2_3 = before_rotation_mask_2_3[6:0]@before_rotation_mask_2_3[15:7] ) ;

ASSERT( branch_2_0_another = BVXOR( branch_2_0_up, branch_2_0_down ) ) ;
ASSERT( branch_2_1_another = BVXOR( branch_2_1_up, branch_2_1_down ) ) ;
ASSERT( branch_2_2_another = BVXOR( branch_2_2_up, branch_2_2_down ) ) ;
ASSERT( branch_2_3_another = BVXOR( branch_2_3_up, branch_2_3_down ) ) ;
ASSERT( xor_2_0_up = xor_2_0_down ) ;
ASSERT( xor_2_0_up = xor_2_0_another ) ;
ASSERT( xor_2_1_up = xor_2_1_down ) ;
ASSERT( xor_2_1_up = xor_2_1_another ) ;
ASSERT( xor_2_2_up = xor_2_2_down ) ;
ASSERT( xor_2_2_up = xor_2_2_another ) ;
ASSERT( xor_2_3_up = xor_2_3_down ) ;
ASSERT( xor_2_3_up = xor_2_3_another ) ;
ASSERT( after_rotation_mask_2_0 = branch_2_0_up );
ASSERT( after_rotation_mask_2_1 = xor_2_1_up );
ASSERT( after_rotation_mask_2_2 = xor_2_2_up );
ASSERT( after_rotation_mask_2_3 = branch_2_3_up );

ASSERT( after_blockxor_mask_2_0 = xor_2_0_down );
ASSERT( after_blockxor_mask_2_1 = branch_2_1_down );
ASSERT( after_blockxor_mask_2_2 = branch_2_2_down );
ASSERT( after_blockxor_mask_2_3 = xor_2_3_down );

ASSERT( branch_2_0_another = xor_2_2_another );
ASSERT( branch_2_1_another = xor_2_0_another );
ASSERT( branch_2_2_another = xor_2_3_another );
ASSERT( branch_2_3_another = xor_2_1_another );

ASSERT( branch_2_0_down = xor_2_0_up );
ASSERT( branch_2_1_up = xor_2_1_down );
ASSERT( branch_2_2_up = xor_2_2_down );
ASSERT( branch_2_3_down = xor_2_3_up );

ASSERT( before_sbox_mask_3_0 = after_blockxor_mask_2_0[3:0] ) ;
ASSERT( before_sbox_mask_3_1 = after_blockxor_mask_2_0[7:4] ) ;
ASSERT( before_sbox_mask_3_2 = after_blockxor_mask_2_0[11:8] ) ;
ASSERT( before_sbox_mask_3_3 = after_blockxor_mask_2_0[15:12] ) ;
ASSERT( before_sbox_mask_3_4 = after_blockxor_mask_2_1[3:0] ) ;
ASSERT( before_sbox_mask_3_5 = after_blockxor_mask_2_1[7:4] ) ;
ASSERT( before_sbox_mask_3_6 = after_blockxor_mask_2_1[11:8] ) ;
ASSERT( before_sbox_mask_3_7 = after_blockxor_mask_2_1[15:12] ) ;
ASSERT( before_sbox_mask_3_8 = after_blockxor_mask_2_2[3:0] ) ;
ASSERT( before_sbox_mask_3_9 = after_blockxor_mask_2_2[7:4] ) ;
ASSERT( before_sbox_mask_3_10 = after_blockxor_mask_2_2[11:8] ) ;
ASSERT( before_sbox_mask_3_11 = after_blockxor_mask_2_2[15:12] ) ;
ASSERT( before_sbox_mask_3_12 = after_blockxor_mask_2_3[3:0] ) ;
ASSERT( before_sbox_mask_3_13 = after_blockxor_mask_2_3[7:4] ) ;
ASSERT( before_sbox_mask_3_14 = after_blockxor_mask_2_3[11:8] ) ;
ASSERT( before_sbox_mask_3_15 = after_blockxor_mask_2_3[15:12] ) ;

ASSERT( IF ( before_sbox_mask_2_0=0hex0 AND after_sbox_mask_2_0=0hex0 ) THEN flag_2_0=0hex000 ELSE flag_2_0=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_2_1=0hex0 AND after_sbox_mask_2_1=0hex0 ) THEN flag_2_1=0hex000 ELSE flag_2_1=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_2_2=0hex0 AND after_sbox_mask_2_2=0hex0 ) THEN flag_2_2=0hex000 ELSE flag_2_2=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_2_3=0hex0 AND after_sbox_mask_2_3=0hex0 ) THEN flag_2_3=0hex000 ELSE flag_2_3=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_2_4=0hex0 AND after_sbox_mask_2_4=0hex0 ) THEN flag_2_4=0hex000 ELSE flag_2_4=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_2_5=0hex0 AND after_sbox_mask_2_5=0hex0 ) THEN flag_2_5=0hex000 ELSE flag_2_5=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_2_6=0hex0 AND after_sbox_mask_2_6=0hex0 ) THEN flag_2_6=0hex000 ELSE flag_2_6=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_2_7=0hex0 AND after_sbox_mask_2_7=0hex0 ) THEN flag_2_7=0hex000 ELSE flag_2_7=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_2_8=0hex0 AND after_sbox_mask_2_8=0hex0 ) THEN flag_2_8=0hex000 ELSE flag_2_8=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_2_9=0hex0 AND after_sbox_mask_2_9=0hex0 ) THEN flag_2_9=0hex000 ELSE flag_2_9=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_2_10=0hex0 AND after_sbox_mask_2_10=0hex0 ) THEN flag_2_10=0hex000 ELSE flag_2_10=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_2_11=0hex0 AND after_sbox_mask_2_11=0hex0 ) THEN flag_2_11=0hex000 ELSE flag_2_11=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_2_12=0hex0 AND after_sbox_mask_2_12=0hex0 ) THEN flag_2_12=0hex000 ELSE flag_2_12=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_2_13=0hex0 AND after_sbox_mask_2_13=0hex0 ) THEN flag_2_13=0hex000 ELSE flag_2_13=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_2_14=0hex0 AND after_sbox_mask_2_14=0hex0 ) THEN flag_2_14=0hex000 ELSE flag_2_14=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_2_15=0hex0 AND after_sbox_mask_2_15=0hex0 ) THEN flag_2_15=0hex000 ELSE flag_2_15=0hex001 ENDIF ) ;

ASSERT( ( linear_dist[before_sbox_mask_2_0@after_sbox_mask_2_0]=0hex00 ) => ( bias_2_0=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_0@after_sbox_mask_2_0]=0hex02 ) => ( bias_2_0=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_0@after_sbox_mask_2_0]=0hex04 ) => ( bias_2_0=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_0@after_sbox_mask_2_0]=0hex08 ) => ( bias_2_0=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_1@after_sbox_mask_2_1]=0hex00 ) => ( bias_2_1=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_1@after_sbox_mask_2_1]=0hex02 ) => ( bias_2_1=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_1@after_sbox_mask_2_1]=0hex04 ) => ( bias_2_1=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_1@after_sbox_mask_2_1]=0hex08 ) => ( bias_2_1=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_2@after_sbox_mask_2_2]=0hex00 ) => ( bias_2_2=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_2@after_sbox_mask_2_2]=0hex02 ) => ( bias_2_2=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_2@after_sbox_mask_2_2]=0hex04 ) => ( bias_2_2=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_2@after_sbox_mask_2_2]=0hex08 ) => ( bias_2_2=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_3@after_sbox_mask_2_3]=0hex00 ) => ( bias_2_3=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_3@after_sbox_mask_2_3]=0hex02 ) => ( bias_2_3=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_3@after_sbox_mask_2_3]=0hex04 ) => ( bias_2_3=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_3@after_sbox_mask_2_3]=0hex08 ) => ( bias_2_3=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_4@after_sbox_mask_2_4]=0hex00 ) => ( bias_2_4=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_4@after_sbox_mask_2_4]=0hex02 ) => ( bias_2_4=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_4@after_sbox_mask_2_4]=0hex04 ) => ( bias_2_4=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_4@after_sbox_mask_2_4]=0hex08 ) => ( bias_2_4=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_5@after_sbox_mask_2_5]=0hex00 ) => ( bias_2_5=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_5@after_sbox_mask_2_5]=0hex02 ) => ( bias_2_5=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_5@after_sbox_mask_2_5]=0hex04 ) => ( bias_2_5=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_5@after_sbox_mask_2_5]=0hex08 ) => ( bias_2_5=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_6@after_sbox_mask_2_6]=0hex00 ) => ( bias_2_6=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_6@after_sbox_mask_2_6]=0hex02 ) => ( bias_2_6=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_6@after_sbox_mask_2_6]=0hex04 ) => ( bias_2_6=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_6@after_sbox_mask_2_6]=0hex08 ) => ( bias_2_6=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_7@after_sbox_mask_2_7]=0hex00 ) => ( bias_2_7=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_7@after_sbox_mask_2_7]=0hex02 ) => ( bias_2_7=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_7@after_sbox_mask_2_7]=0hex04 ) => ( bias_2_7=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_7@after_sbox_mask_2_7]=0hex08 ) => ( bias_2_7=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_8@after_sbox_mask_2_8]=0hex00 ) => ( bias_2_8=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_8@after_sbox_mask_2_8]=0hex02 ) => ( bias_2_8=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_8@after_sbox_mask_2_8]=0hex04 ) => ( bias_2_8=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_8@after_sbox_mask_2_8]=0hex08 ) => ( bias_2_8=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_9@after_sbox_mask_2_9]=0hex00 ) => ( bias_2_9=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_9@after_sbox_mask_2_9]=0hex02 ) => ( bias_2_9=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_9@after_sbox_mask_2_9]=0hex04 ) => ( bias_2_9=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_9@after_sbox_mask_2_9]=0hex08 ) => ( bias_2_9=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_10@after_sbox_mask_2_10]=0hex00 ) => ( bias_2_10=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_10@after_sbox_mask_2_10]=0hex02 ) => ( bias_2_10=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_10@after_sbox_mask_2_10]=0hex04 ) => ( bias_2_10=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_10@after_sbox_mask_2_10]=0hex08 ) => ( bias_2_10=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_11@after_sbox_mask_2_11]=0hex00 ) => ( bias_2_11=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_11@after_sbox_mask_2_11]=0hex02 ) => ( bias_2_11=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_11@after_sbox_mask_2_11]=0hex04 ) => ( bias_2_11=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_11@after_sbox_mask_2_11]=0hex08 ) => ( bias_2_11=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_12@after_sbox_mask_2_12]=0hex00 ) => ( bias_2_12=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_12@after_sbox_mask_2_12]=0hex02 ) => ( bias_2_12=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_12@after_sbox_mask_2_12]=0hex04 ) => ( bias_2_12=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_12@after_sbox_mask_2_12]=0hex08 ) => ( bias_2_12=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_13@after_sbox_mask_2_13]=0hex00 ) => ( bias_2_13=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_13@after_sbox_mask_2_13]=0hex02 ) => ( bias_2_13=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_13@after_sbox_mask_2_13]=0hex04 ) => ( bias_2_13=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_13@after_sbox_mask_2_13]=0hex08 ) => ( bias_2_13=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_14@after_sbox_mask_2_14]=0hex00 ) => ( bias_2_14=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_14@after_sbox_mask_2_14]=0hex02 ) => ( bias_2_14=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_14@after_sbox_mask_2_14]=0hex04 ) => ( bias_2_14=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_14@after_sbox_mask_2_14]=0hex08 ) => ( bias_2_14=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_15@after_sbox_mask_2_15]=0hex00 ) => ( bias_2_15=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_15@after_sbox_mask_2_15]=0hex02 ) => ( bias_2_15=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_15@after_sbox_mask_2_15]=0hex04 ) => ( bias_2_15=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_2_15@after_sbox_mask_2_15]=0hex08 ) => ( bias_2_15=0hex000 ) ) ;

ASSERT( NOT( bias_2_0=0hex007 ) ) ;
ASSERT( NOT( bias_2_1=0hex007 ) ) ;
ASSERT( NOT( bias_2_2=0hex007 ) ) ;
ASSERT( NOT( bias_2_3=0hex007 ) ) ;
ASSERT( NOT( bias_2_4=0hex007 ) ) ;
ASSERT( NOT( bias_2_5=0hex007 ) ) ;
ASSERT( NOT( bias_2_6=0hex007 ) ) ;
ASSERT( NOT( bias_2_7=0hex007 ) ) ;
ASSERT( NOT( bias_2_8=0hex007 ) ) ;
ASSERT( NOT( bias_2_9=0hex007 ) ) ;
ASSERT( NOT( bias_2_10=0hex007 ) ) ;
ASSERT( NOT( bias_2_11=0hex007 ) ) ;
ASSERT( NOT( bias_2_12=0hex007 ) ) ;
ASSERT( NOT( bias_2_13=0hex007 ) ) ;
ASSERT( NOT( bias_2_14=0hex007 ) ) ;
ASSERT( NOT( bias_2_15=0hex007 ) ) ;

ASSERT( before_rotation_mask_3_0 = after_sbox_mask_3_1@after_sbox_mask_3_0@after_sbox_mask_3_3@after_sbox_mask_3_2 ) ;
ASSERT( before_rotation_mask_3_1 = after_sbox_mask_3_5@after_sbox_mask_3_4@after_sbox_mask_3_7@after_sbox_mask_3_6 ) ;
ASSERT( before_rotation_mask_3_2 = after_sbox_mask_3_9@after_sbox_mask_3_8@after_sbox_mask_3_11@after_sbox_mask_3_10 ) ;
ASSERT( before_rotation_mask_3_3 = after_sbox_mask_3_13@after_sbox_mask_3_12@after_sbox_mask_3_15@after_sbox_mask_3_14 ) ;

ASSERT( after_rotation_mask_3_0 = before_rotation_mask_3_0[14:0]@before_rotation_mask_3_0[15:15] ) ;
ASSERT( after_rotation_mask_3_1 = before_rotation_mask_3_1[11:0]@before_rotation_mask_3_1[15:12] ) ;
ASSERT( after_rotation_mask_3_2 = before_rotation_mask_3_2[8:0]@before_rotation_mask_3_2[15:9] ) ;
ASSERT( after_rotation_mask_3_3 = before_rotation_mask_3_3[6:0]@before_rotation_mask_3_3[15:7] ) ;

ASSERT( branch_3_0_another = BVXOR( branch_3_0_up, branch_3_0_down ) ) ;
ASSERT( branch_3_1_another = BVXOR( branch_3_1_up, branch_3_1_down ) ) ;
ASSERT( branch_3_2_another = BVXOR( branch_3_2_up, branch_3_2_down ) ) ;
ASSERT( branch_3_3_another = BVXOR( branch_3_3_up, branch_3_3_down ) ) ;
ASSERT( xor_3_0_up = xor_3_0_down ) ;
ASSERT( xor_3_0_up = xor_3_0_another ) ;
ASSERT( xor_3_1_up = xor_3_1_down ) ;
ASSERT( xor_3_1_up = xor_3_1_another ) ;
ASSERT( xor_3_2_up = xor_3_2_down ) ;
ASSERT( xor_3_2_up = xor_3_2_another ) ;
ASSERT( xor_3_3_up = xor_3_3_down ) ;
ASSERT( xor_3_3_up = xor_3_3_another ) ;
ASSERT( after_rotation_mask_3_0 = branch_3_0_up );
ASSERT( after_rotation_mask_3_1 = xor_3_1_up );
ASSERT( after_rotation_mask_3_2 = xor_3_2_up );
ASSERT( after_rotation_mask_3_3 = branch_3_3_up );

ASSERT( after_blockxor_mask_3_0 = xor_3_0_down );
ASSERT( after_blockxor_mask_3_1 = branch_3_1_down );
ASSERT( after_blockxor_mask_3_2 = branch_3_2_down );
ASSERT( after_blockxor_mask_3_3 = xor_3_3_down );

ASSERT( branch_3_0_another = xor_3_2_another );
ASSERT( branch_3_1_another = xor_3_0_another );
ASSERT( branch_3_2_another = xor_3_3_another );
ASSERT( branch_3_3_another = xor_3_1_another );

ASSERT( branch_3_0_down = xor_3_0_up );
ASSERT( branch_3_1_up = xor_3_1_down );
ASSERT( branch_3_2_up = xor_3_2_down );
ASSERT( branch_3_3_down = xor_3_3_up );

ASSERT( before_sbox_mask_4_0 = after_blockxor_mask_3_0[3:0] ) ;
ASSERT( before_sbox_mask_4_1 = after_blockxor_mask_3_0[7:4] ) ;
ASSERT( before_sbox_mask_4_2 = after_blockxor_mask_3_0[11:8] ) ;
ASSERT( before_sbox_mask_4_3 = after_blockxor_mask_3_0[15:12] ) ;
ASSERT( before_sbox_mask_4_4 = after_blockxor_mask_3_1[3:0] ) ;
ASSERT( before_sbox_mask_4_5 = after_blockxor_mask_3_1[7:4] ) ;
ASSERT( before_sbox_mask_4_6 = after_blockxor_mask_3_1[11:8] ) ;
ASSERT( before_sbox_mask_4_7 = after_blockxor_mask_3_1[15:12] ) ;
ASSERT( before_sbox_mask_4_8 = after_blockxor_mask_3_2[3:0] ) ;
ASSERT( before_sbox_mask_4_9 = after_blockxor_mask_3_2[7:4] ) ;
ASSERT( before_sbox_mask_4_10 = after_blockxor_mask_3_2[11:8] ) ;
ASSERT( before_sbox_mask_4_11 = after_blockxor_mask_3_2[15:12] ) ;
ASSERT( before_sbox_mask_4_12 = after_blockxor_mask_3_3[3:0] ) ;
ASSERT( before_sbox_mask_4_13 = after_blockxor_mask_3_3[7:4] ) ;
ASSERT( before_sbox_mask_4_14 = after_blockxor_mask_3_3[11:8] ) ;
ASSERT( before_sbox_mask_4_15 = after_blockxor_mask_3_3[15:12] ) ;

ASSERT( IF ( before_sbox_mask_3_0=0hex0 AND after_sbox_mask_3_0=0hex0 ) THEN flag_3_0=0hex000 ELSE flag_3_0=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_3_1=0hex0 AND after_sbox_mask_3_1=0hex0 ) THEN flag_3_1=0hex000 ELSE flag_3_1=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_3_2=0hex0 AND after_sbox_mask_3_2=0hex0 ) THEN flag_3_2=0hex000 ELSE flag_3_2=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_3_3=0hex0 AND after_sbox_mask_3_3=0hex0 ) THEN flag_3_3=0hex000 ELSE flag_3_3=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_3_4=0hex0 AND after_sbox_mask_3_4=0hex0 ) THEN flag_3_4=0hex000 ELSE flag_3_4=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_3_5=0hex0 AND after_sbox_mask_3_5=0hex0 ) THEN flag_3_5=0hex000 ELSE flag_3_5=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_3_6=0hex0 AND after_sbox_mask_3_6=0hex0 ) THEN flag_3_6=0hex000 ELSE flag_3_6=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_3_7=0hex0 AND after_sbox_mask_3_7=0hex0 ) THEN flag_3_7=0hex000 ELSE flag_3_7=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_3_8=0hex0 AND after_sbox_mask_3_8=0hex0 ) THEN flag_3_8=0hex000 ELSE flag_3_8=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_3_9=0hex0 AND after_sbox_mask_3_9=0hex0 ) THEN flag_3_9=0hex000 ELSE flag_3_9=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_3_10=0hex0 AND after_sbox_mask_3_10=0hex0 ) THEN flag_3_10=0hex000 ELSE flag_3_10=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_3_11=0hex0 AND after_sbox_mask_3_11=0hex0 ) THEN flag_3_11=0hex000 ELSE flag_3_11=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_3_12=0hex0 AND after_sbox_mask_3_12=0hex0 ) THEN flag_3_12=0hex000 ELSE flag_3_12=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_3_13=0hex0 AND after_sbox_mask_3_13=0hex0 ) THEN flag_3_13=0hex000 ELSE flag_3_13=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_3_14=0hex0 AND after_sbox_mask_3_14=0hex0 ) THEN flag_3_14=0hex000 ELSE flag_3_14=0hex001 ENDIF ) ;
ASSERT( IF ( before_sbox_mask_3_15=0hex0 AND after_sbox_mask_3_15=0hex0 ) THEN flag_3_15=0hex000 ELSE flag_3_15=0hex001 ENDIF ) ;

ASSERT( ( linear_dist[before_sbox_mask_3_0@after_sbox_mask_3_0]=0hex00 ) => ( bias_3_0=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_0@after_sbox_mask_3_0]=0hex02 ) => ( bias_3_0=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_0@after_sbox_mask_3_0]=0hex04 ) => ( bias_3_0=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_0@after_sbox_mask_3_0]=0hex08 ) => ( bias_3_0=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_1@after_sbox_mask_3_1]=0hex00 ) => ( bias_3_1=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_1@after_sbox_mask_3_1]=0hex02 ) => ( bias_3_1=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_1@after_sbox_mask_3_1]=0hex04 ) => ( bias_3_1=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_1@after_sbox_mask_3_1]=0hex08 ) => ( bias_3_1=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_2@after_sbox_mask_3_2]=0hex00 ) => ( bias_3_2=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_2@after_sbox_mask_3_2]=0hex02 ) => ( bias_3_2=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_2@after_sbox_mask_3_2]=0hex04 ) => ( bias_3_2=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_2@after_sbox_mask_3_2]=0hex08 ) => ( bias_3_2=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_3@after_sbox_mask_3_3]=0hex00 ) => ( bias_3_3=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_3@after_sbox_mask_3_3]=0hex02 ) => ( bias_3_3=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_3@after_sbox_mask_3_3]=0hex04 ) => ( bias_3_3=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_3@after_sbox_mask_3_3]=0hex08 ) => ( bias_3_3=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_4@after_sbox_mask_3_4]=0hex00 ) => ( bias_3_4=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_4@after_sbox_mask_3_4]=0hex02 ) => ( bias_3_4=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_4@after_sbox_mask_3_4]=0hex04 ) => ( bias_3_4=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_4@after_sbox_mask_3_4]=0hex08 ) => ( bias_3_4=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_5@after_sbox_mask_3_5]=0hex00 ) => ( bias_3_5=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_5@after_sbox_mask_3_5]=0hex02 ) => ( bias_3_5=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_5@after_sbox_mask_3_5]=0hex04 ) => ( bias_3_5=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_5@after_sbox_mask_3_5]=0hex08 ) => ( bias_3_5=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_6@after_sbox_mask_3_6]=0hex00 ) => ( bias_3_6=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_6@after_sbox_mask_3_6]=0hex02 ) => ( bias_3_6=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_6@after_sbox_mask_3_6]=0hex04 ) => ( bias_3_6=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_6@after_sbox_mask_3_6]=0hex08 ) => ( bias_3_6=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_7@after_sbox_mask_3_7]=0hex00 ) => ( bias_3_7=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_7@after_sbox_mask_3_7]=0hex02 ) => ( bias_3_7=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_7@after_sbox_mask_3_7]=0hex04 ) => ( bias_3_7=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_7@after_sbox_mask_3_7]=0hex08 ) => ( bias_3_7=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_8@after_sbox_mask_3_8]=0hex00 ) => ( bias_3_8=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_8@after_sbox_mask_3_8]=0hex02 ) => ( bias_3_8=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_8@after_sbox_mask_3_8]=0hex04 ) => ( bias_3_8=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_8@after_sbox_mask_3_8]=0hex08 ) => ( bias_3_8=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_9@after_sbox_mask_3_9]=0hex00 ) => ( bias_3_9=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_9@after_sbox_mask_3_9]=0hex02 ) => ( bias_3_9=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_9@after_sbox_mask_3_9]=0hex04 ) => ( bias_3_9=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_9@after_sbox_mask_3_9]=0hex08 ) => ( bias_3_9=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_10@after_sbox_mask_3_10]=0hex00 ) => ( bias_3_10=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_10@after_sbox_mask_3_10]=0hex02 ) => ( bias_3_10=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_10@after_sbox_mask_3_10]=0hex04 ) => ( bias_3_10=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_10@after_sbox_mask_3_10]=0hex08 ) => ( bias_3_10=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_11@after_sbox_mask_3_11]=0hex00 ) => ( bias_3_11=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_11@after_sbox_mask_3_11]=0hex02 ) => ( bias_3_11=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_11@after_sbox_mask_3_11]=0hex04 ) => ( bias_3_11=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_11@after_sbox_mask_3_11]=0hex08 ) => ( bias_3_11=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_12@after_sbox_mask_3_12]=0hex00 ) => ( bias_3_12=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_12@after_sbox_mask_3_12]=0hex02 ) => ( bias_3_12=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_12@after_sbox_mask_3_12]=0hex04 ) => ( bias_3_12=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_12@after_sbox_mask_3_12]=0hex08 ) => ( bias_3_12=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_13@after_sbox_mask_3_13]=0hex00 ) => ( bias_3_13=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_13@after_sbox_mask_3_13]=0hex02 ) => ( bias_3_13=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_13@after_sbox_mask_3_13]=0hex04 ) => ( bias_3_13=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_13@after_sbox_mask_3_13]=0hex08 ) => ( bias_3_13=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_14@after_sbox_mask_3_14]=0hex00 ) => ( bias_3_14=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_14@after_sbox_mask_3_14]=0hex02 ) => ( bias_3_14=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_14@after_sbox_mask_3_14]=0hex04 ) => ( bias_3_14=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_14@after_sbox_mask_3_14]=0hex08 ) => ( bias_3_14=0hex000 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_15@after_sbox_mask_3_15]=0hex00 ) => ( bias_3_15=0hex007 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_15@after_sbox_mask_3_15]=0hex02 ) => ( bias_3_15=0hex003 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_15@after_sbox_mask_3_15]=0hex04 ) => ( bias_3_15=0hex002 ) ) ;
ASSERT( ( linear_dist[before_sbox_mask_3_15@after_sbox_mask_3_15]=0hex08 ) => ( bias_3_15=0hex000 ) ) ;

ASSERT( NOT( bias_3_0=0hex007 ) ) ;
ASSERT( NOT( bias_3_1=0hex007 ) ) ;
ASSERT( NOT( bias_3_2=0hex007 ) ) ;
ASSERT( NOT( bias_3_3=0hex007 ) ) ;
ASSERT( NOT( bias_3_4=0hex007 ) ) ;
ASSERT( NOT( bias_3_5=0hex007 ) ) ;
ASSERT( NOT( bias_3_6=0hex007 ) ) ;
ASSERT( NOT( bias_3_7=0hex007 ) ) ;
ASSERT( NOT( bias_3_8=0hex007 ) ) ;
ASSERT( NOT( bias_3_9=0hex007 ) ) ;
ASSERT( NOT( bias_3_10=0hex007 ) ) ;
ASSERT( NOT( bias_3_11=0hex007 ) ) ;
ASSERT( NOT( bias_3_12=0hex007 ) ) ;
ASSERT( NOT( bias_3_13=0hex007 ) ) ;
ASSERT( NOT( bias_3_14=0hex007 ) ) ;
ASSERT( NOT( bias_3_15=0hex007 ) ) ;

ASSERT( total_num = BVPLUS(12, flag_0_0, flag_0_1, flag_0_2, flag_0_3, flag_0_4, flag_0_5, flag_0_6, flag_0_7, flag_0_8, flag_0_9, flag_0_10, flag_0_11, flag_0_12, flag_0_13, flag_0_14, flag_0_15, flag_1_0, flag_1_1, flag_1_2, flag_1_3, flag_1_4, flag_1_5, flag_1_6, flag_1_7, flag_1_8, flag_1_9, flag_1_10, flag_1_11, flag_1_12, flag_1_13, flag_1_14, flag_1_15, flag_2_0, flag_2_1, flag_2_2, flag_2_3, flag_2_4, flag_2_5, flag_2_6, flag_2_7, flag_2_8, flag_2_9, flag_2_10, flag_2_11, flag_2_12, flag_2_13, flag_2_14, flag_2_15, flag_3_0, flag_3_1, flag_3_2, flag_3_3, flag_3_4, flag_3_5, flag_3_6, flag_3_7, flag_3_8, flag_3_9, flag_3_10, flag_3_11, flag_3_12, flag_3_13, flag_3_14, flag_3_15 ) ) ; 
ASSERT( flag_tail = BVPLUS(12, flag_3_0, flag_3_1, flag_3_2, flag_3_3, flag_3_4, flag_3_5, flag_3_6, flag_3_7, flag_3_8, flag_3_9, flag_3_10, flag_3_11, flag_3_12, flag_3_13, flag_3_14, flag_3_15 ) ) ; 
ASSERT( sum_bias = BVPLUS(12, 0hex001, bias_0_0, bias_0_1, bias_0_2, bias_0_3, bias_0_4, bias_0_5, bias_0_6, bias_0_7, bias_0_8, bias_0_9, bias_0_10, bias_0_11, bias_0_12, bias_0_13, bias_0_14, bias_0_15, bias_1_0, bias_1_1, bias_1_2, bias_1_3, bias_1_4, bias_1_5, bias_1_6, bias_1_7, bias_1_8, bias_1_9, bias_1_10, bias_1_11, bias_1_12, bias_1_13, bias_1_14, bias_1_15, bias_2_0, bias_2_1, bias_2_2, bias_2_3, bias_2_4, bias_2_5, bias_2_6, bias_2_7, bias_2_8, bias_2_9, bias_2_10, bias_2_11, bias_2_12, bias_2_13, bias_2_14, bias_2_15, bias_3_0, bias_3_1, bias_3_2, bias_3_3, bias_3_4, bias_3_5, bias_3_6, bias_3_7, bias_3_8, bias_3_9, bias_3_10, bias_3_11, bias_3_12, bias_3_13, bias_3_14, bias_3_15 ) ) ; 
ASSERT( total_bias = BVSUB(12, sum_bias, total_num ) ) ;
ASSERT( total_bias = 0hex00b ) ;
QUERY(FALSE) ;
COUNTEREXAMPLE ;
